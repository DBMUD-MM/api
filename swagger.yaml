openapi: 3.0.0
info:
  version: '2'
  title: Crewmeister API
  description: |

    ## Authentication

    Most API endpoints require a client authentication. The Crewmeister API offers a token-based solution for authentication.
    After a successful authentication, a token is returned that has to be presented in subsequent calls.

    #### Authentication types

    There are three authentication types:
    - User authentication: This allows the client to act as a certain crewmeister user. The most typical use case.
    - Crew authentication: Allows to access certain information from a crew without having to be logged in as as a specific user of this crew. This enables application such as the Terminal Login to show a list of crew members and their current working state.
    - Admin authentication: For internal administration cases only, not open for third party apps.

    In the future more authentication types might be added. In a single call, a client can be authenticated for none, one or many of the authentication types. E.g., a client  can be authenticated as a user and a crew (eg. while in terminal mode).

    #### Obtaining tokens

    You can obtain a token by posting the authentication data to the API endpoint for the resepective authentication type:
    - User authentication: `/user/token`
    - Crew authentcation: `/crew/token`
    - Admin authentication: `/admin/token`

    If the authentication was successful, you get back the token. Store it together with the id of the object you authenticated as (e.g., the user id for a user authentication).

    #### Passing tokens and ids to the API

    For each authentication type, there are three ways to send a token (in priority order):
    1. Via query parameter: `cmUserAuthenticationToken` / `cmCrewAuthenticationToken` / `cmAdminAuthenticationToken`
    1. Via HTTP header: `X-cmUserAuthenticationToken` / `X-cmCrewAuthenticationToken` / `X-cmAdminAuthenticationToken`
    1. Via cookie (the HTTP cookie header): `cmUserAuthenticationToken`/ `cmCrewAuthenticationToken` / `cmAdminAuthenticationToken`

    When multiple tokens *for the same authentication type* are passed in a single call, the one with the highest priority is used for authentication.

    In addition to the token, the caller has to send the id of the object the token was issued for with each call. Again, there are three ways to do so:

    1. Via query parameter: `cmUserAuthenticationId` / `cmCrewAuthenticationId` / `cmAdminAuthenticationId`
    1. Via HTTP header: `X-cmUserAuthenticationId` / `X-cmCrewAuthenticationId` / `X-cmAdminAuthenticationId`
    1. Via cookie (HTTP cookie header): `cmUserAuthenticationId`/ `cmCrewAuthenticationId` / `cmAdminAuthenticationId`


    ### To specify:

    * What happens when the id and the token do not match? Suggest to throw an error
    * How do tokens become invalid? (time? password change?...)
    * What happens when a call is made with an invalid token?

    ### Authentication context:

    Answering the question **"Who is doing something to whom?"** gets increasingly more complex the more authentication types are added. To  make this question easier to answer we have a model called 'context'.

servers:
  - url: https://api.crewmeister.com/api/v2
  - url: https://api.crewmeister-stage.com/api/v2

security:
  - headerAuthenticationUserId: []
    headerAuthenticationUserToken: []
  - cookieAuthenticationUserId: []
    cookieAuthenticationUserToken: []
  - queryAuthenticationUserId: []
    queryAuthenticationUserToken: []

paths:
  /context:
    get:
      operationId: getContext
      summary: Get the current authentication status.
      description: Returns the ids of the **active** (= authenticated) models.
      tags:
        - Authentication
      responses:
        200:
          description: Returns the ids of the authenticated models.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'

  /user/authentication:
    post:
      operationId: createUserAuthentication
      summary: Creates a new authentication token for a user.
      tags:
        - Authentication
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIdentifier:
                  type: string
                  example: "hallo@crewmeister.com"
                password:
                  type: string
                  example: "super secret"

      responses:
        200:
          description: Returns a new authentication token for a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

    delete:
      operationId: deleteUserAuthentication
      summary: Invalidates the given authentication token
      tags:
        - Authentication
        - User
      parameters:
        - in: query
          name: all
          schema:
            type: boolean
          description: Invalidates all existing user authentication tokens for the currently authenticated user.
      responses:
        200:
          description: Removes an authentication token for a user

  /crew:
    get:
      tags:
        - Crew
      summary: Get crew data
      description: >
        The user endpoint returns all crews the caller is allowed to see.
      responses:
        '200':
          description: An array containing the data from the crews
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Crew'

  /crew/{crew_id}/member:
    get:
      tags:
        - Member
        - Not Implemented Yet
      summary: Get members for given crew_id
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
      responses:
        '200':
          description: An array containing all members for the crew
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'

  /crew/{crew_id}/permission:
    get:
      tags:
        - Crew
      summary: Get permissions
      description: >
        The endpoint returns all permissions for the given crew
        and currently authenticated user.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
      responses:
        '200':
          description: An array containing all permissions for the crew
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'

  /crew/{crew_id}/settings:
    get:
      tags:
        - Crew
      summary: Get crew settings
      description: >
        The endpoint returns the current settings for a crew.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
      responses:
        '200':
          description: An object containing all settings for the crew
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    $ref: '#/components/schemas/Settings'

  /crew/{crew_id}/group:
    get:
      tags:
        - Crew
      summary: Get groups
      description: >
        The endpoint returns all groups for a given crew.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
      responses:
        '200':
          description: An array containing all groups for the crew
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
  /user:
    get:
      tags:
        - User
      summary: Get user data
      description: >
        The user endpoint returns all users the caller is allowed to see.
      responses:
        '200':
          description: An array containing the data from the users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      summary: Create a user
      description: >
        Creates a new user with the given params.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "myUsername"
                email:
                  type: string
                  example: "my@email.com"
                language:
                  type: string
                  description: en or de are supported right now
                  default: en
                  enum:
                    - de
                    - en
                password:
                  type: string
                  description: The current password of the user
                  example: "super secret"
      responses:
        '200':
          description: Returns the params of the created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: object
                    $ref: '#/components/schemas/User'
  /user/{user_id}:
    put:
      tags:
        - User
      summary: Update a user
      description: >
        Creates a new user with the given params.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "myUsername"
                email:
                  type: string
                  example: "my@email.com"
                language:
                  type: string
                  description: en or de are supported right now
                  default: en
                  enum:
                    - de
                    - en
                new_password:
                  type: string
                  description: The new password of the user
                  example: "my new password"
                password:
                  type: string
                  description: The current password of the user
                  example: "super secret"
      responses:
        '200':
          description: Returns the params of the created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: object
                    $ref: '#/components/schemas/User'


  /user/{user_id}/avatar:
    post:
      tags:
        - User
      summary: Update a user avatar image
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Returns the params of the created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: object
                    $ref: '#/components/schemas/User'

  '/crew/{crew_id}/time-tracking/stamp-chains':
    delete:
      operationId: deleteStampChain
      description: |
        Deletes all related stamps for for a given timestamp (dateTime).
      tags:
        - Time Tracking
        - Not Implemented Yet
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/timestamp'
        - name: userId
          in: query
          description: >-
            The id of the user for whom the stamp chain should be deleted.
            Defaults to the authenticated user_id when this parameter is not
            given.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The stamp chain was deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A status message.
                  status_code:
                    type: integer
                    description: A unique status code.
    post:
      tags:
        - Time Tracking
        - Not Implemented Yet
      summary: Create multiple correlated stamps.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - name: userId
          in: query
          description: >-
            The id of the user for whom the stamp chain should be created.
            Defaults to the authenticated user_id when this parameter is not
            given.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: An array of stamps
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stamp'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Stamp'
  '/crew/{crew_id}/time-tracking/durations':
    get:
      summary: Time tracking durations
      description: >
        The duration endpoint gives access to *weighted* time tracking values in
        crewmeister (eg. for use in statistics).
      tags:
        - Time Tracking
        - Statistics
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/start_time'
        - $ref: '#/components/parameters/end_time'
        - $ref: '#/components/parameters/user_id_filter'
        - $ref: '#/components/parameters/group_id_filter'
        - name: groupBy
          in: query
          description: >-
            The entities on which the durations should be grouped by. If one
            wants to get all time durations for a user, he should group by user.
            Valid options are "group_id" and "user_id".
          required: false
          schema:
            type: string
            format: comma-separated-list
        - name: granularity
          in: query
          description: >
            The time granularity on which durations should be grouped by.
            If the paramter is none or unset the api responds the weighted time
            tracking durations for a given date range (start_time, end_time)
            without splitting the durations by a given granularity.
          required: false
          schema:
            type: string
            enum:
              - none
              - day
              - week
              - month
      responses:
        '200':
          description: An array different durations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Duration'
  '/crew/{crew_id}/time-tracking/stamps':
    get:
      summary: Time tracking stamps
      description: >
        The stamps endpoint responds information about the raw/unweighted time
        trackings of a given crew. Stamps containing the same *clockInTimestamp*
        attribute belong to one *stamp-chain*.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/start_time'
        - $ref: '#/components/parameters/end_time'
        - $ref: '#/components/parameters/user_id_filter'
        - name: timestamp
          in: query
          description: >
            Warning! This parameter might change it's behaviour in the future.
            (Use startTime == endTime == date to get a chain of stamps for a
            point in time)
            In the early days of crewmeister it was possible to have multiple
            overlapping work time periods at the same time. In some cases this
            leads to unexpected behaviour. If one wants to render the current
            work time status (eg. mini-app) and there are overlapping work time
            periods the client doesn't know which one to pick. In this case the
            one period with a stop work stamp will overrule all other work time
            periods for the given timestamp.
          required: false
          schema:
            type: boolean
      tags:
        - Time Tracking
      responses:
        '200':
          description: An array of stamps
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stamp'

  /crew/{crew_id}/export:
    get:
      summary: Get an export of the Crewmeister Data
      tags:
        - Export
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - name: user_id[]
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: group_id[]
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer

      responses:
        200:
          description: An object containing the configuration for Salary Export for the crew
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary

  /crew/{crew_id}/salary-export-configuration:
    get:
      summary: Get the configuration for the crew for salary export
      tags:
        - Salary Export
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
      responses:
        200:
          description: An object containing the configuration for Salary Export for the crew
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/SalaryExportConfiguration'

  /prices/config:
    get:
      summary: Get the configuration for the price calculator
      tags:
        - Payment
      responses:
        '200':
          description: An object containing all known products and crew sizes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                    example: 200
                  payload:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Vacation planner
                      crew_sizes:
                        type: array
                        items:
                          type: object
                          properties:
                            max:
                              type: integer
                              example: 10
                            name:
                              type: string
                              example: 1-10
  /prices/calculate:
    get:
      summary: Calculate a product price
      description: >
        Given the relevant attributes for a crewmeister subscription, it returns
        the final price and details how it was calculated, includung individual
        prices and optional discounts.
      parameters:
        - name: product_ids
          in: query
          description: The selected products
          schema:
            type: array
            items:
              type: integer
        - name: crew_size
          in: query
          description: Number of crew members
          schema:
            type: integer
        - name: payment_period
          in: query
          description: 'The selected payment period, monthly or yearly'
          schema:
            type: string
            enum:
              - monthly
              - yearly
        - name: voucher_code
          in: query
          description: An optional voucher code (provides discounts)
          required: false
          schema:
            type: string
      tags:
        - Payment
      responses:
        '200':
          description: A price calculation result object
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                    example: 200
                  payload:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/PaymentProduct'
                      firstPeriod:
                        $ref: '#/components/schemas/PaymentPeriodPrice'
                      recurringPeriod:
                        $ref: '#/components/schemas/PaymentPeriodPrice'

components:
  securitySchemes:
    headerAuthenticationUserId:
      type: apiKey
      in: header
      name: X-cmAuthenticationUserId
    headerAuthenticationUserToken:
      type: apiKey
      in: header
      name: X-cmAuthenticationUserToken

    cookieAuthenticationUserId:
      type: apiKey
      in: cookie
      name: cmAuthenticationUserId
    cookieAuthenticationUserToken:
      type: apiKey
      in: cookie
      name: cmAuthenticationUserToken

    queryAuthenticationUserId:
      type: apiKey
      in: query
      name: cmAuthenticationUserId
    queryAuthenticationUserToken:
      type: apiKey
      in: query
      name: cmAuthenticationUserToken
  parameters:
    crew_id_in_path:
      name: crew_id
      in: path
      required: true
      schema:
        type: integer
    timestamp:
      name: timestamp
      in: query
      description: An iso timestamp
      required: false
      schema:
        type: string
        format: comma-separated-list
    user_id_filter:
      name: userIds
      in: query
      description: >-
        A comma seperated list of user_ids which should be filtered. If
        parameter is missing this filter won't be applied.
      required: false
      schema:
        type: string
        format: comma-separated-list
    group_id_filter:
      name: groupIds
      in: query
      description: >-
        A comma seperated list of group_ids which should be filtered. If
        parameter is missing this filter won't be applied.
      required: false
      schema:
        type: string
        format: comma-separated-list
    start_time:
      name: startTime
      in: query
      description: Start time from where the stamps should be fetched.
      required: false
      schema:
        type: string
        format: time
    end_time:
      name: endTime
      in: query
      description: End time from where the stamps should be fetched.
      required: false
      schema:
        type: string
        format: time
    from:
      name: from
      in: query
      required: true
      schema:
        type: string
        format: date
        example: '2000-01-01'
    to:
      name: to
      in: query
      required: true
      schema:
        type: string
        format: date
        example: '2000-01-01'
  schemas:
    Token:
      type: object
      properties:
        id:
          type: integer
          example: 1
        token:
          type: string
          example: 'something random'
    PaymentPeriodPrice:
      type: object
      properties:
        finalPrice:
          type: string
          example: '20,92 €'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/PaymentDiscount'
    PaymentDiscount:
      type: object
      properties:
        name:
          type: string
          example: Jährliche Zahlung
        amount:
          type: string
          example: '2,00 €'
    PaymentProduct:
      type: object
      properties:
        name:
          type: string
          example: Zeiterfassung
        amount:
          type: string
          example: '12,12'
    Stamp:
      type: object
      properties:
        timeAccount:
          type: integer
          description: The time account.
        timestamp:
          type: string
          description: ISO8601
        note:
          type: string
          description: A note
        groupId:
          type: integer
          description: The group id
        location:
          type: string
          description: A note
        clockInTimestamp:
          type: string
          description: ISO8601
        userId:
          type: integer
          description: The group id
    Context:
      type: object
      properties:
        activeUserId:
          nullable: true
          type: integer
          description: The id of the authenticated user.
          example: 567
        activeCrewId:
          nullable: true
          type: integer
          description: The id of the authenticated crew.
          example: 1232
        activeAdminId:
          nullable: true
          type: integer
          description: The id of the authenticated admin.
          example: null

    Duration:
      type: object
      properties:
        type:
          type: string
          description: 'The type of the duration (grouped_by, total).'
          enum:
            - total
            - grouped_by
        index:
          type: integer
          description: >-
            The array index or offset of the duration from the given start date.
            If no duration was found in the given granuarity and time period,
            the duration isn't returned from the server.
        value:
          type: string
          description: ISO8601 duration string
        groupBy:
          type: object
          properties:
            userId:
              type: integer
            groupId:
              type: integer
    SalaryExportConfiguration:
      type: object
      properties:
        crewId:
          type: integer
          example: 1
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          nullable: false
        name:
          type: string
          example: 'A Crewmeister User'
        username:
          type: string
          example: 'a_crewmeister_user'
          nullable: true
        email:
          type: string
          example: 'email@email.com'
          nullable: true
        avatarUrl:
          type: string
        language:
          type: string
          example: 'en'

    Crew:
      type: object
      properties:
        id:
          type: integer
          example: 1
          nullable: false
        name:
          type: string
          example: 'A Crewmeister User'
        password:
          type: string
          example: 'the crew password'
        owner_id:
          type: integer
          example: 1
          nullable: false
        trial:
          type: boolean
          example: false
        valid_until:
          type: string
          example: '2000-01-01'

    Permission:
      type: object
      description: |
        Crewmeister has an inheritance based permission system. Given
        the permission `canSeeAbsences`, the upper permission is
        overwriting the lower permission:
        - returned by the api and user_id given
        - returned by the api and user_id null
        - not returned by the API (defaults to not allowed)
        ````
        [{
          user_id: 1,
          crew_id: 2,
          name: 'canSeeAbsences',
          allowed: false
        }, {
          user_id: null,
          crew_id: 2,
          name: 'canSeeAbsences',
          allowed: true
        }]
        ````
        In the example it would be allowed to see all absences of the crew with
        the ID 2, except for user with the ID 1. A permission `canUseTimeTracking`
        would default to false as it isn't returned by the API.

      properties:
        user_id:
          type: integer
          example: 1
          nullable: false
        crew_id:
          type: integer
          example: 1
          nullable: false
        name:
          type: string
          example: 'canUseTimeTracking'
        allowed:
          type: bool
          example: true

    Group:
      type: object
      properties:
        id:
          type: integer
          example: 1
          nullable: false
        crew_id:
          type: integer
          example: 1
          nullable: false
        name:
          type: string
          example: 'Group 1'
        disabled_at:
          type: string
          example: "2000-01-01"

    Member:
      type: object
      properties:
        id:
          type: integer
          example: 1
          nullable: false
        user_id:
          type: integer
          example: 1
          nullable: false
        crew_id:
          type: integer
          example: 1
          nullable: false
        name:
          type: string
          example: 'Sepp'
          nullable: true
          description: |
            When not set the name of the user is used. With the right
            permission the name can be overwritten.
        disabled_at:
          type: string
          example: "2000-01-01"
          nullable: true
        first_work_day_at:
          type: string
          example: "2000-01-01"
          nullable: false
        role:
          type: string
          enum: [owner, manager, member]
          description: |
            - Owner: The owner is the one who created the crew. This
              Role is set during sign-up and can't be changed afterwards.
            - Manager: The manager has similar permissions like the owner.
            - Member: Has the least permissions in Crewmeister and should
              be used for regular employees.
          example: "owner"
          nullable: false
        image:
          type: string
          nullable: true
          description: |
            Right now the avatar image of the user is passed to the client.
            When image is null a default avatar image can be provided by
            the client.

    Settings:
      type: object
      properties:
        absence_management_see_all_absences:
          type: boolean
          example: true
        crew_id:
          type: integer
          example: 1
          nullable: false
        time_tracking_edit_allowed:
          type: boolean
          example: false
        time_tracking_in_future_allowed:
          type: boolean
          example: false
        time_tracking_location:
          type: integer
          example: 1
          nullable: false

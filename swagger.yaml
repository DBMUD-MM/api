openapi: 3.0.0
info:
  version: '2'
  title: Crewmeister API
  description: |
    # Authentication
    
    The crewmeister api offers a token based solution for authentication. After generating a token there are 3 different ways on how to send this token to our backend.
    - Query (hightest priority)
    - Headers (recommended)
    - Cookie
      
    When multiple tokens are passed to the API the one with the highest priority is used for authentication. The application currently has 3 different authentication types:
    - user
    - crew
    - admin
    
    In the future more authentication types might be added. A device can be authenticated as either none, one or many of the above listed authentication types. This means that the device of a crewmeister user can be authenticated as a user and a crew (eg. while in terminal mode). Answering the question **"Who is doing something to whom?"** gets increasingly more complex the more authentication types are added. To  make this question easier to answer we have a model called 'context'. 
  
servers:
  - url: https://api.crewmeister.com/api/v2
  - url: https://api.crewmeister-stage.com/api/v2

security:
  - headerAuthenticationUserId: []
    headerAuthenticationUserToken: [] 
  - cookieAuthenticationUserId: []
    cookieAuthenticationUserToken: [] 
  - queryAuthenticationUserId: []
    queryAuthenticationUserToken: [] 
  
paths:
  /context:
    get: 
      operationId: getContext
      summary: Get the current authentication status.
      description: Returns the ids of the **active** (= authenticated) models.
      tags: 
        - Authentication
      responses:
        200:
          description: Returns the ids of the authenticated models.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
  
  /user/authentication:
    post: 
      operationId: createUserAuthentication
      summary: Creates a new authentication token for a user.
      tags: 
        - Authentication
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIdentifier: 
                  type: string
                  example: "hallo@crewmeister.com"
                password:
                  type: string
                  example: "super secret"
          
      responses:
        200:
          description: Returns a new authentication token for a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
                
    delete: 
      operationId: deleteUserAuthentication
      summary: Invalidates the given authentication token
      tags: 
        - Authentication
        - User
      parameters:
        - in: query
          name: all
          schema:
            type: boolean
          description: Invalidates all existing user authentication tokens for the currently authenticated user.
      responses:
        200:
          description: Removes an authentication token for a user
                
          
  '/crew/{crew_id}/time-tracking/stamp-chains':
    delete:
      operationId: deleteStampChain
      description: |
        Deletes all related stamps for for a given timestamp (dateTime).
      tags:
        - Time Tracking
        - Not implemented yet
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/timestamp'
        - name: userId
          in: query
          description: >-
            The id of the user for whom the stamp chain should be deleted.
            Defaults to the authenticated user_id when this parameter is not
            given.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: The stamp chain was deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A status message.
                  status_code:
                    type: integer
                    description: A unique status code.
    post:
      tags:
        - Time Tracking
        - Not implemented yet
      summary: Create multiple correlated stamps.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - name: userId
          in: query
          description: >-
            The id of the user for whom the stamp chain should be created.
            Defaults to the authenticated user_id when this parameter is not
            given.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: An array of stamps
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stamp'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Stamp'
  '/crew/{crew_id}/time-tracking/durations':
    get:
      summary: Time tracking durations
      description: >
        The duration endpoint gives access to *weighted* time tracking values in
        crewmeister (eg. for use in statistics).
      tags:
        - Time Tracking
        - Statistics
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/start_time'
        - $ref: '#/components/parameters/end_time'
        - $ref: '#/components/parameters/user_id_filter'
        - $ref: '#/components/parameters/group_id_filter'
        - name: groupBy
          in: query
          description: >-
            The entities on which the durations should be grouped by. If one
            wants to get all time durations for a user, he should group by user.
            Valid options are "group_id" and "user_id".
          required: false
          schema:
            type: string
            format: comma-separated-list
        - name: granularity
          in: query
          description: >
            The time granularity on which durations should be grouped by. 

            If the paramter is none or unset the api responds the weighted time
            tracking durations for a given date range (start_time, end_time)
            without splitting the durations by a given granularity.
          required: false
          schema:
            type: string
            enum:
              - none
              - day
              - week
              - month
      responses:
        '200':
          description: An array different durations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Duration'
  '/crew/{crew_id}/time-tracking/stamps':
    get:
      summary: Time tracking stamps
      description: >
        The stamps endpoint responds information about the raw/unweighted time
        trackings of a given crew. Stamps containing the same *clockInTimestamp*
        attribute belong to one *stamp-chain*.
      parameters:
        - $ref: '#/components/parameters/crew_id_in_path'
        - $ref: '#/components/parameters/start_time'
        - $ref: '#/components/parameters/end_time'
        - $ref: '#/components/parameters/user_id_filter'
        - name: timestamp
          in: query
          description: >
            Warning! This parameter might change it's behaviour in the future.
            (Use startTime == endTime == date to get a chain of stamps for a
            point in time)

            In the early days of crewmeister it was possible to have multiple
            overlapping work time periods at the same time. In some cases this
            leads to unexpected behaviour. If one wants to render the current
            work time status (eg. mini-app) and there are overlapping work time
            periods the client doesn't know which one to pick. In this case the
            one period with a stop work stamp will overrule all other work time
            periods for the given timestamp.
          required: false
          schema:
            type: boolean
      tags:
        - Time Tracking
      responses:
        '200':
          description: An array of stamps
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stamp'
  /prices/config:
    get:
      summary: Get the configuration for the price calculator
      tags:
        - Payment
      responses:
        '200':
          description: An object containing all known products and crew sizes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                    example: 200
                  payload:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Vacation planner
                      crew_sizes:
                        type: array
                        items:
                          type: object
                          properties:
                            max:
                              type: integer
                              example: 10
                            name:
                              type: string
                              example: 1-10
  /prices/calculate:
    get:
      summary: Calculate a product price
      description: >
        Given the relevant attributes for a crewmeister subscription, it returns
        the final price and details how it was calculated, includung individual
        prices and optional discounts.
      parameters:
        - name: product_ids
          in: query
          description: The selected products
          schema:
            type: array
            items:
              type: integer
        - name: crew_size
          in: query
          description: Number of crew members
          schema:
            type: integer
        - name: payment_period
          in: query
          description: 'The selected payment period, monthly or yearly'
          schema:
            type: string
            enum:
              - monthly
              - yearly
        - name: voucher_code
          in: query
          description: An optional voucher code (provides discounts)
          required: false
          schema:
            type: string
      tags:
        - Payment
      responses:
        '200':
          description: A price calculation result object
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A simple status message.
                  status_code:
                    type: integer
                    description: A unique status code.
                    example: 200
                  payload:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/PaymentProduct'
                      firstPeriod:
                        $ref: '#/components/schemas/PaymentPeriodPrice'
                      recurringPeriod:
                        $ref: '#/components/schemas/PaymentPeriodPrice'

components:
  securitySchemes:
    headerAuthenticationUserId:
      type: apiKey
      in: header
      name: X-cmAuthenticationUserId
    headerAuthenticationUserToken:
      type: apiKey
      in: header
      name: X-cmAuthenticationUserToken
      
    cookieAuthenticationUserId:
      type: apiKey
      in: cookie
      name: cmAuthenticationUserId
    cookieAuthenticationUserToken:
      type: apiKey
      in: cookie
      name: cmAuthenticationUserToken
      
    queryAuthenticationUserId:
      type: apiKey
      in: query
      name: cmAuthenticationUserId
    queryAuthenticationUserToken:
      type: apiKey
      in: query
      name: cmAuthenticationUserToken
  parameters:
    crew_id_in_path:
      name: crew_id
      in: path
      required: true
      schema:
        type: integer
    timestamp:
      name: timestamp
      in: query
      description: An iso timestamp
      required: false
      schema:
        type: string
        format: comma-separated-list
    user_id_filter:
      name: userIds
      in: query
      description: >-
        A comma seperated list of user_ids which should be filtered. If
        parameter is missing this filter won't be applied.
      required: false
      schema:
        type: string
        format: comma-separated-list
    group_id_filter:
      name: groupIds
      in: query
      description: >-
        A comma seperated list of group_ids which should be filtered. If
        parameter is missing this filter won't be applied.
      required: false
      schema:
        type: string
        format: comma-separated-list
    start_time:
      name: startTime
      in: query
      description: Start time from where the stamps should be fetched.
      required: false
      schema:
        type: string
        format: time
    end_time:
      name: endTime
      in: query
      description: End time from where the stamps should be fetched.
      required: false
      schema:
        type: string
        format: time
  schemas:
    Token:
      type: object
      properties:
        id:
          type: integer
          example: 1
        token:
          type: string
          example: 'something random'
    PaymentPeriodPrice:
      type: object
      properties:
        finalPrice:
          type: string
          example: '20,92 €'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/PaymentDiscount'
    PaymentDiscount:
      type: object
      properties:
        name:
          type: string
          example: Jährliche Zahlung
        amount:
          type: string
          example: '2,00 €'
    PaymentProduct:
      type: object
      properties:
        name:
          type: string
          example: Zeiterfassung
        amount:
          type: string
          example: '12,12'
    Stamp:
      type: object
      properties:
        timeAccount:
          type: integer
          description: The time account.
        timestamp:
          type: string
          description: ISO8601
        note:
          type: string
          description: A note
        groupId:
          type: integer
          description: The group id
        location:
          type: string
          description: A note
        clockInTimestamp:
          type: string
          description: ISO8601
        userId:
          type: integer
          description: The group id
    Context:
      type: object
      properties:
        activeUserId:
          nullable: true
          type: integer
          description: The id of the authenticated user.
          example: 567
        activeCrewId:
          nullable: true
          type: integer
          description: The id of the authenticated crew.
          example: 1232
        activeAdminId:
          nullable: true
          type: integer
          description: The id of the authenticated admin.
          example: null
          
    Duration:
      type: object
      properties:
        type:
          type: string
          description: 'The type of the duration (grouped_by, total).'
          enum:
            - total
            - grouped_by
        index:
          type: integer
          description: >-
            The array index or offset of the duration from the given start date.
            If no duration was found in the given granuarity and time period,
            the duration isn't returned from the server.
        value:
          type: string
          description: ISO8601 duration string
        groupBy:
          type: object
          properties:
            userId:
              type: integer
            groupId:
              type: integer
           
